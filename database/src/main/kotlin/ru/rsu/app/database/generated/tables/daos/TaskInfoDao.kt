/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import ru.rsu.app.database.generated.tables.TaskInfo
import ru.rsu.app.database.generated.tables.records.TaskInfoRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TaskInfoDao(configuration: Configuration?) : DAOImpl<TaskInfoRecord, ru.rsu.app.database.generated.tables.pojos.TaskInfo, Long>(TaskInfo.TASK_INFO, ru.rsu.app.database.generated.tables.pojos.TaskInfo::class.java, configuration) {

    /**
     * Create a new TaskInfoDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: ru.rsu.app.database.generated.tables.pojos.TaskInfo): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): ru.rsu.app.database.generated.tables.pojos.TaskInfo? = fetchOne(TaskInfo.TASK_INFO.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.NAME, *values)

    /**
     * Fetch records that have <code>task_description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTaskDescription(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.TASK_DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>task_description IN (values)</code>
     */
    fun fetchByTaskDescription(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.TASK_DESCRIPTION, *values)

    /**
     * Fetch records that have <code>r_task_type_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRTaskTypeId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.R_TASK_TYPE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>r_task_type_id IN (values)</code>
     */
    fun fetchByRTaskTypeId(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.R_TASK_TYPE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>r_task_status_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRTaskStatusId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.R_TASK_STATUS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>r_task_status_id IN (values)</code>
     */
    fun fetchByRTaskStatusId(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.R_TASK_STATUS_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>r_user_executor_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfRUserExecutorId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.R_USER_EXECUTOR_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>r_user_executor_id IN (values)</code>
     */
    fun fetchByRUserExecutorId(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.R_USER_EXECUTOR_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>r_user_director_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfRUserDirectorId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.R_USER_DIRECTOR_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>r_user_director_id IN (values)</code>
     */
    fun fetchByRUserDirectorId(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.R_USER_DIRECTOR_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>r_available_equipment_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfRAvailableEquipmentId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.R_AVAILABLE_EQUIPMENT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>r_available_equipment_id IN (values)</code>
     */
    fun fetchByRAvailableEquipmentId(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.R_AVAILABLE_EQUIPMENT_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>start_task_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStartTaskDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.START_TASK_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>start_task_date IN (values)</code>
     */
    fun fetchByStartTaskDate(vararg values: LocalDateTime): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.START_TASK_DATE, *values)

    /**
     * Fetch records that have <code>finish_task_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFinishTaskDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetchRange(TaskInfo.TASK_INFO.FINISH_TASK_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>finish_task_date IN (values)</code>
     */
    fun fetchByFinishTaskDate(vararg values: LocalDateTime): List<ru.rsu.app.database.generated.tables.pojos.TaskInfo> = fetch(TaskInfo.TASK_INFO.FINISH_TASK_DATE, *values)
}
