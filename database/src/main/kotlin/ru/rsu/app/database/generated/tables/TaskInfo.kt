/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.rsu.app.database.generated.Public
import ru.rsu.app.database.generated.keys.TASK_INFO_PKEY
import ru.rsu.app.database.generated.keys.TASK_INFO__FK_TASK_STATUS_ID
import ru.rsu.app.database.generated.keys.TASK_INFO__FK_TASK_TYPE_ID
import ru.rsu.app.database.generated.tables.records.TaskInfoRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TaskInfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TaskInfoRecord>?,
    aliased: Table<TaskInfoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TaskInfoRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.task_info</code>
         */
        val TASK_INFO: TaskInfo = TaskInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TaskInfoRecord> = TaskInfoRecord::class.java

    /**
     * The column <code>public.task_info.id</code>.
     */
    val ID: TableField<TaskInfoRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.task_info.name</code>.
     */
    val NAME: TableField<TaskInfoRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.task_info.task_description</code>.
     */
    val TASK_DESCRIPTION: TableField<TaskInfoRecord, String?> = createField(DSL.name("task_description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.task_info.r_task_type_id</code>.
     */
    val R_TASK_TYPE_ID: TableField<TaskInfoRecord, Long?> = createField(DSL.name("r_task_type_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.task_info.r_task_status_id</code>.
     */
    val R_TASK_STATUS_ID: TableField<TaskInfoRecord, Long?> = createField(DSL.name("r_task_status_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.task_info.r_user_executor_id</code>.
     */
    val R_USER_EXECUTOR_ID: TableField<TaskInfoRecord, Long?> = createField(DSL.name("r_user_executor_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.task_info.r_user_director_id</code>.
     */
    val R_USER_DIRECTOR_ID: TableField<TaskInfoRecord, Long?> = createField(DSL.name("r_user_director_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.task_info.r_available_equipment_id</code>.
     */
    val R_AVAILABLE_EQUIPMENT_ID: TableField<TaskInfoRecord, Long?> = createField(DSL.name("r_available_equipment_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.task_info.start_task_date</code>.
     */
    val START_TASK_DATE: TableField<TaskInfoRecord, LocalDateTime?> = createField(DSL.name("start_task_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.task_info.finish_task_date</code>.
     */
    val FINISH_TASK_DATE: TableField<TaskInfoRecord, LocalDateTime?> = createField(DSL.name("finish_task_date"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<TaskInfoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TaskInfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.task_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.task_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.task_info</code> table reference
     */
    constructor(): this(DSL.name("task_info"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TaskInfoRecord>): this(Internal.createPathAlias(child, key), child, key, TASK_INFO, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<TaskInfoRecord, Long?> = super.getIdentity() as Identity<TaskInfoRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<TaskInfoRecord> = TASK_INFO_PKEY
    override fun getReferences(): List<ForeignKey<TaskInfoRecord, *>> = listOf(TASK_INFO__FK_TASK_TYPE_ID, TASK_INFO__FK_TASK_STATUS_ID)

    private lateinit var _taskType: TaskType
    private lateinit var _taskStatus: TaskStatus

    /**
     * Get the implicit join path to the <code>public.task_type</code> table.
     */
    fun taskType(): TaskType {
        if (!this::_taskType.isInitialized)
            _taskType = TaskType(this, TASK_INFO__FK_TASK_TYPE_ID)

        return _taskType;
    }

    val taskType: TaskType
        get(): TaskType = taskType()

    /**
     * Get the implicit join path to the <code>public.task_status</code> table.
     */
    fun taskStatus(): TaskStatus {
        if (!this::_taskStatus.isInitialized)
            _taskStatus = TaskStatus(this, TASK_INFO__FK_TASK_STATUS_ID)

        return _taskStatus;
    }

    val taskStatus: TaskStatus
        get(): TaskStatus = taskStatus()
    override fun `as`(alias: String): TaskInfo = TaskInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): TaskInfo = TaskInfo(alias, this)
    override fun `as`(alias: Table<*>): TaskInfo = TaskInfo(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TaskInfo = TaskInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TaskInfo = TaskInfo(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TaskInfo = TaskInfo(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<Long?, String?, String?, Long?, Long?, Long?, Long?, Long?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row10<Long?, String?, String?, Long?, Long?, Long?, Long?, Long?, LocalDateTime?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, Long?, Long?, Long?, Long?, Long?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, Long?, Long?, Long?, Long?, Long?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
