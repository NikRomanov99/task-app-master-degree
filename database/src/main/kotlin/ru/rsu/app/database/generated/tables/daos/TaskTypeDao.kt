/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables.daos


import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import ru.rsu.app.database.generated.tables.TaskType
import ru.rsu.app.database.generated.tables.records.TaskTypeRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TaskTypeDao(configuration: Configuration?) : DAOImpl<TaskTypeRecord, ru.rsu.app.database.generated.tables.pojos.TaskType, Long>(TaskType.TASK_TYPE, ru.rsu.app.database.generated.tables.pojos.TaskType::class.java, configuration) {

    /**
     * Create a new TaskTypeDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: ru.rsu.app.database.generated.tables.pojos.TaskType): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.TaskType> = fetchRange(TaskType.TASK_TYPE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.TaskType> = fetch(TaskType.TASK_TYPE.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): ru.rsu.app.database.generated.tables.pojos.TaskType? = fetchOne(TaskType.TASK_TYPE.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.TaskType> = fetchRange(TaskType.TASK_TYPE.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.TaskType> = fetch(TaskType.TASK_TYPE.NAME, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.TaskType> = fetchRange(TaskType.TASK_TYPE.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.TaskType> = fetch(TaskType.TASK_TYPE.DESCRIPTION, *values)
}
